{"name":"Dapper-dot-net","tagline":"Dapper - a simple object mapper for .Net","body":"# Dapper - a simple object mapper for .Net\r\n\r\n## Overview\r\n\r\nA brief guide is available [on github](https://github.com/StackExchange/dapper-dot-net/blob/master/Readme.md)\r\n\r\nMore examples coming soon on Stack Overflow docs\r\n\r\nQuestions on Stack Overflow should be tagged [`dapper`](http://stackoverflow.com/questions/tagged/dapper)\r\n\r\n## Installation\r\n\r\nFrom NuGet:\r\n\r\n    Install-Package Dapper\r\n\r\nor\r\n\r\n    Install-Package Dapper.StrongName\r\n\r\n## Release  Notes\r\n\r\n### unreleased\r\n\r\n- (n/a)\r\n\r\n### 1.50-beta2\r\n\r\n- Core CLR now targets rc1 / 23516\r\n- various Core CLR fixes\r\n- code cleanup and C# 6 usage (assorted)\r\n\r\n### 1.50-beta1\r\n\r\n- split `SqlMapper.cs` as it was becoming too unmaintainable; NuGet is now the only supported deployment channel\r\n- remove down-level C# requirements, as \"drop in the file\" is no longer the expected usage\r\n- `SqlMapper.Settings` added; provides high-level global configuration; initially `CommandTimeout` (@Irrational86)\r\n- improve error message if an array is used as a parameter in an invalid context\r\n- add `Type[]` support for `GridReader.Read` scenarios (@NikolayGlynchak)\r\n- support for custom type-maps in collection parameters (@gjsduarte)\r\n- fix incorrect cast in `QueryAsync<T>` (@phnx47, #346)\r\n- fix incorrect null handling re `UdtTypeName` (@perliedman)\r\n- support for `SqlDataRecord` (@sqmgh)\r\n- allow `DbString` default for `IsAnsi` to be specified (@kppullin)\r\n- provide `TypeMapProvider` with lazy func-based initialization (@garyhuntddn)\r\n- core-clr updated to beta-8 and various cleanups/fixes\r\n- built using core-clr build tools\r\n\r\n\r\n### 1.42\r\n\r\n- fix bug with dynamic parameters where `.Get<T>` is called before the command is executed\r\n\r\n### 1.41-beta5\r\n\r\n- core-clr packaging build and workarounds\r\n- fix bug with literal `{=val}` boolean replacements\r\n\r\n### 1.41-beta4\r\n\r\n- core-clr packaging build\r\n- improve mapping to enum members (@BrianJolly)\r\n\r\n### 1.41-beta\r\n\r\n- core-clr packaging build\r\n\r\n### 1.41-alpha\r\n\r\n- introduces dnx (core-clr) experimental changes\r\n- adds `SqlBuilder` project\r\n- improve error message when incorrectly accessing parameter values\r\n\r\n### 1.40\r\n\r\n- workaround for broken `GetValues()` on Mono; add `AsList()`\r\n\r\n### 1.39\r\n\r\n- fix case on SQL CLR types; grid-reader should respect no-cache flags; make parameter inclusion case-insensitive\r\n\r\n### 1.38\r\n\r\n- specify constructor explicitly; allow value-type parameters (albeit: boxed)\r\n\r\n### 1.37\r\n\r\n- Reuse StringBuilder instances when possible (list parameters in particular)\r\n\r\n### 1.36\r\n\r\n- Fix Issue #192 (expanded parameter naming glitch) and Issue #178 (execute reader now wraps the command/reader pair, to extend the command lifetime; note that the underlying command/reader are available by casting to `IWrappedDataReader`)\r\n\r\n### 1.35\r\n\r\n- Fix Issue #151 (Execute should work with `ExpandoObject` etc); Fix Issue #182 (better support for db-type when using `object` values);\r\n- output expressions / callbacks in dynamic args (via Derek); arbitrary number of types in multi-mapping (via James Holwell);\r\n- fix `DbString`/Oracle bug (via Mauro Cerutti); new support for **named positional arguments**\r\n\r\n### 1.34\r\n\r\n- Support for `SqlHierarchyId` (core)\r\n\r\n### 1.33\r\n\r\n- Support for `SqlGeometry` (core) and `DbGeometry` (EF)\r\n\r\n### 1.32\r\n\r\n- Support for `SqlGeography` in core library\r\n\r\n### 1.31\r\n\r\n- Fix issue with error message when there is a column/type mismatch\r\n\r\n### 1.30\r\n\r\n- Better async cancellation\r\n\r\n### 1.29\r\n\r\n- Make underscore name matching optional (opt-in) - this can be a breaking change for some people\r\n\r\n### 1.28\r\n\r\n- Much better numeric type conversion; fix for large oracle strings; map `Foo_Bar` to `FooBar` (etc); `ExecuteScalar` added; stability fixes\r\n\r\n### 1.27\r\n\r\n- Fixes for type-handler parse; ensure type-handlers get last dibs on configuring parameters\r\n\r\n### 1.26\r\n\r\n- New type handler API for extension support\r\n\r\n### 1.25\r\n\r\n- Command recycling and disposing during pipelined async multi-exec; enable pipeline (via sync-over-async) for sync API","google":"UA-23092854-2","note":"Don't delete this file! It's used internally to help with page regeneration."}